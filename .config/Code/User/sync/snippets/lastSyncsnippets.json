{"ref":"f9caa619-a585-468a-bb20-f381cec9aa9f","syncData":{"version":1,"machineId":"efba62e6-10b7-4f4a-861b-4e184aa6f500","content":"{\"cpp.json\":\"{\\n    // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and\\n    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n    // same ids are connected.\\n    // Example:\\n    \\\"Print to console\\\": {\\n        \\\"prefix\\\": \\\"cp simple\\\",\\n        \\\"body\\\": [\\n            \\\"#define ll long long\\\",\\n            \\\"#include <bits/stdc++.h>\\\",\\n            \\\"using namespace std;\\\",\\n            \\\"int main()\\\",\\n            \\\"{\\\",\\n            \\\"ios_base::sync_with_stdio(false);\\\",\\n            \\\"cin.tie(NULL);\\\",\\n            \\\"ll t;\\\",\\n            \\\"cin >> t;\\\",\\n            \\\"while (t--)\\\",\\n            \\\"{\\\",\\n            \\\"$0\\\",\\n            \\\"}\\\",\\n            \\\"return 0;\\\",\\n            \\\"}\\\"\\n        ],\\n        \\\"description\\\": \\\"preset for compititve programming\\\"\\n    },\\n    \\\"debug compititve\\\": {\\n        \\\"prefix\\\": \\\"cp hard\\\",\\n        \\\"body\\\": [\\n            \\\"#include <bits/stdc++.h>\\\",\\n            \\\"\\\",\\n            \\\"using namespace std;\\\",\\n            \\\"\\\",\\n            \\\"typedef long long ll;\\\",\\n            \\\"typedef unsigned long long ull;\\\",\\n            \\\"typedef long double lld;\\\",\\n            \\\"\\\",\\n            \\\"#define INF 1e18\\\",\\n            \\\"#define MOD 1000000007\\\",\\n            \\\"#define nline \\\\\\\"\\\\\\\\n\\\\\\\"\\\",\\n            \\\"#define pb push_back\\\",\\n            \\\"#define ppb pop_back\\\",\\n            \\\"#define mp make_pair\\\",\\n            \\\"#define ff first\\\",\\n            \\\"#define ss second\\\",\\n            \\\"#define PI 3.141592653589793238462\\\",\\n            \\\"#define set_bits __builtin_popcountll\\\",\\n            \\\"#define sz(x) ((int)(x).size())\\\",\\n            \\\"#define all(x) (x).begin(), (x).end()\\\",\\n            \\\"#define fastio() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)\\\",\\n            \\\"\\\",\\n            \\\"struct custom_hash {\\\",\\n            \\\"    static uint64_t splitmix64(uint64_t x) {\\\",\\n            \\\"        x += 0x9e3779b97f4a7c15;\\\",\\n            \\\"        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\\\",\\n            \\\"        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\\\",\\n            \\\"        return x ^ (x >> 31);\\\",\\n            \\\"    }\\\",\\n            \\\"\\\",\\n            \\\"    size_t operator()(uint64_t x) const {\\\",\\n            \\\"        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\\\",\\n            \\\"        return splitmix64(x + FIXED_RANDOM);\\\",\\n            \\\"    }\\\",\\n            \\\"};\\\",\\n            \\\"\\\",\\n            \\\"#ifdef ONLINE_JUDGE\\\",\\n            \\\"#define debug(x)\\\",\\n            \\\"#else\\\",\\n            \\\"#define debug(x)  cerr << #x << \\\\\\\" \\\\\\\"; _print(x);         cerr << endl;\\\",\\n            \\\"#endif\\\",\\n            \\\"\\\",\\n            \\\"void _print(ll t)\\\",\\n            \\\"{\\\",\\n            \\\"cerr << t;\\\",\\n            \\\"}\\\",\\n            \\\"void _print(int t) { cerr << t; }\\\",\\n            \\\"void _print(string t) { cerr << t; }\\\",\\n            \\\"void _print(char t) { cerr << t; }\\\",\\n            \\\"void _print(lld t) { cerr << t; }\\\",\\n            \\\"void _print(double t) { cerr << t; }\\\",\\n            \\\"void _print(ull t) { cerr << t; }\\\",\\n            \\\"\\\",\\n            \\\"template <class T, class V>\\\",\\n            \\\"void _print(pair<T, V> p);\\\",\\n            \\\"template <class T>\\\",\\n            \\\"void _print(vector<T> v);\\\",\\n            \\\"template <class T>\\\",\\n            \\\"void _print(set<T> v);\\\",\\n            \\\"template <class T, class V>\\\",\\n            \\\"void _print(unordered_set<T> v);\\\",\\n            \\\"template <class T, class V>\\\",\\n            \\\"void _print(map<T, V> v);\\\",\\n            \\\"template <class T, class V>\\\",\\n            \\\"void _print(unordered_map<T, V> v);\\\",\\n            \\\"template <class T>\\\",\\n            \\\"void _print(multiset<T> v);\\\",\\n            \\\"template <class T, class V>\\\",\\n            \\\"void _print(pair<T, V> p)\\\",\\n            \\\"{\\\",\\n            \\\"cerr << \\\\\\\"{\\\\\\\";\\\",\\n            \\\"_print(p.ff);\\\",\\n            \\\"cerr << \\\\\\\",\\\\\\\";\\\",\\n            \\\"_print(p.ss);\\\",\\n            \\\"cerr << \\\\\\\"}\\\\\\\";\\\",\\n            \\\"}\\\",\\n            \\\"template <class T>\\\",\\n            \\\"void _print(vector<T> v)\\\",\\n            \\\"{\\\",\\n            \\\"cerr << \\\\\\\"[\\\\\\\";\\\",\\n            \\\"for (T i : v)\\\",\\n            \\\" {\\\",\\n            \\\"    _print(i);\\\",\\n            \\\"    cerr << \\\\\\\" \\\\\\\";\\\",\\n            \\\"}\\\",\\n            \\\"cerr << \\\\\\\"]\\\\\\\";\\\",\\n            \\\"}\\\",\\n            \\\"template <class T>\\\",\\n            \\\"void _print(set<T> v)\\\",\\n            \\\"{\\\",\\n            \\\"cerr << \\\\\\\"[ \\\\\\\";\\\",\\n            \\\"   for (T i : v)\\\",\\n            \\\"{\\\",\\n            \\\"    _print(i);\\\",\\n            \\\"    cerr << \\\\\\\" \\\\\\\";\\\",\\n            \\\"}\\\",\\n            \\\"cerr << \\\\\\\"]\\\\\\\";\\\",\\n            \\\"}\\\",\\n            \\\"template <class T>\\\",\\n            \\\"void _print(unordered_set<T> v)\\\",\\n            \\\"{\\\",\\n            \\\"cerr << \\\\\\\"[ \\\\\\\";\\\",\\n            \\\"for (T i : v)\\\",\\n            \\\"{\\\",\\n            \\\"_print(i);\\\",\\n            \\\"cerr << \\\\\\\" \\\\\\\";\\\",\\n            \\\"}\\\",\\n            \\\"cerr << \\\\\\\"]\\\\\\\";\\\",\\n            \\\"}\\\",\\n            \\\"template <class T>\\\",\\n            \\\"void _print(multiset<T> v)\\\",\\n            \\\"{\\\",\\n            \\\"cerr << \\\\\\\"[ \\\\\\\";\\\",\\n            \\\"for (T i : v)\\\",\\n            \\\"{\\\",\\n            \\\"_print(i);\\\",\\n            \\\"cerr << \\\\\\\" \\\\\\\";\\\",\\n            \\\"}\\\",\\n            \\\"cerr << \\\\\\\"]\\\\\\\";\\\",\\n            \\\"}\\\",\\n            \\\"template <class T, class V>\\\",\\n            \\\"void _print(map<T, V> v)\\\",\\n            \\\"{\\\",\\n            \\\"cerr << \\\\\\\"[ \\\\\\\";\\\",\\n            \\\"for (auto i : v)\\\",\\n            \\\"{\\\",\\n            \\\"_print(i);\\\",\\n            \\\"cerr << \\\\\\\" \\\\\\\";\\\",\\n            \\\"}\\\",\\n            \\\"cerr << \\\\\\\"]\\\\\\\";\\\",\\n            \\\"}\\\",\\n            \\\"template <class T, class V>\\\",\\n            \\\"void _print(unordered_map<T, V> v)\\\",\\n            \\\"{\\\",\\n            \\\"cerr << \\\\\\\"[ \\\\\\\";\\\",\\n            \\\"for (auto i : v)\\\",\\n            \\\"{\\\",\\n            \\\"_print(i);\\\",\\n            \\\"cerr << \\\\\\\" \\\\\\\";\\\",\\n            \\\"}\\\",\\n            \\\"cerr << \\\\\\\"]\\\\\\\";\\\",\\n            \\\"}\\\",\\n            \\\"\\\",\\n            \\\"void pain()\\\",\\n            \\\"{\\\",\\n            \\\"$0\\\",\\n            \\\"}\\\",\\n            \\\"int main()\\\",\\n            \\\"{\\\",\\n            \\\"#ifndef ONLINE_JUDGE\\\",\\n            \\\"freopen(\\\\\\\"input.txt\\\\\\\", \\\\\\\"r\\\\\\\", stdin);\\\",\\n            \\\"freopen(\\\\\\\"output.txt\\\\\\\", \\\\\\\"w\\\\\\\", stdout);\\\",\\n            \\\"freopen(\\\\\\\"error.txt\\\\\\\", \\\\\\\"w\\\\\\\", stderr);\\\",\\n            \\\"#endif\\\",\\n            \\\"fastio();\\\",\\n            \\\"ll t;\\\",\\n            \\\"cin >> t;\\\",\\n            \\\" for (int zx = 1; zx <= t; zx++)\\\",\\n            \\\"{\\\",\\n            \\\"// cout << \\\\\\\"Case #\\\\\\\" << zx << \\\\\\\": \\\\\\\";\\\",\\n            \\\"pain();\\\",\\n            \\\"}\\\",\\n            \\\"return 0;\\\",\\n            \\\"}\\\"\\n        ],\\n        \\\"description\\\": \\\"preset for compititve programming with debug tools\\\"\\n    },\\n    \\\"debug 2.0\\\": {\\n        \\\"prefix\\\": \\\"cp\\\",\\n        \\\"body\\\": [\\n            \\\"/*\\\",\\n            \\\"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⢃⣀⡀⠀⠀⠀⠀⠀⠀⢾⠀⠀⡐⢀⡂⠀⠰⠀⡴⠀⣠⣀⡀⠰⡀⢀⣴⡿⢻⣷⣿⢿⣷⣶⣶⣶⣶⣶⣶⣿⢻⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢽⣽⣿⣿⣿⣷⣶⣦⣤⣄⣀⣿⡀⠊⣰⣾⣿⣦⣸⠀⢀⣾⡿⣿⣿⣶⣄⣸⣿⢆⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⡃⢉⣿⣿⡎⠙⠿⠻⣟⠿⣿⣇⣸⡿⣿⣯⣿⣿⣄⣿⠉⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⠙⠉⠛⣽⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⠀⠀⠀⠀⠀⠀⣠⣾⣿⠟⠉⠙⠿⢿⣿⡆⠀⠀⠀⠀⠀⠀⠉⢻⣿⣸⣿⣿⣿⣿⣿⣷⣼⡿⣿⣿⣿⡆⠀⢻⣿⣽⣿⣿⣆⠀⠀⢽⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⠀⠀⠀⠀⢀⣾⣿⣿⣿⣢⡀⣠⢞⣽⣎⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⡟⣿⣿⣿⡇⠁⠀⠹⣿⡽⣿⣿⣿⡄⠀⢹⣿⣿⣿⣿⣆⠀⠺⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⠀⠀⠀⢠⣿⣿⣿⣿⢟⠉⠻⣿⣿⣿⣿⣧⡄⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣧⠀⠀⠀⠈⠻⣿⣿⣽⣷⡄⠀⠹⣿⣿⣿⣿⣆⢸⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⠀⠀⢠⣿⣿⣿⣿⣿⣿⠀⠀⠀⣽⢿⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⡆⠀⠀⠀⠀⠹⣿⣿⣿⣿⡄⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⠀⢠⣿⣿⣿⣵⣿⣿⣿⣶⣤⣾⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⠀⢀⠀⠀⠀⠈⢻⣿⣿⣿⣆⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⢠⣿⣿⡿⢡⣿⣿⣿⢻⣿⣿⣿⣿⣿⠛⠃⠀⠀⠀⠀⢀⣉⣛⡦⣤⡀⠀⢻⣿⣿⣿⣦⠟⠀⠀⢀⣠⡤⠞⢿⣿⣿⡆⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⣿⣿⠟⢁⣿⣿⣿⠏⣽⣿⣿⣿⡌⢻⡀⠘⢶⣭⣭⣭⣅⣀⣀⡀⠈⠙⠓⢮⢻⣿⣿⣿⣤⠖⠛⠉⠀⠉⠉⠉⢻⣿⣿⣄⣀⣀⠙⣿⣿⣯⠁⠘⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⣿⠏⠀⣾⣿⣿⡟⣼⣿⣿⣿⣿⣿⣸⡇⠀⠀⠙⢦⣄⣀⣤⣼⣿⡿⠛⢿⠗⠀⢿⣿⣿⣿⠀⣾⡛⢉⣉⣩⣽⣿⡿⣿⣿⡛⠀⠀⠈⣿⣿⡇⢸⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⠁⠀⣸⣿⣿⡿⢀⣿⣿⣿⣿⣿⣿⡇⢧⠀⠀⠀⠀⠀⠉⠉⠩⣥⣤⣬⠗⠃⠀⠀⠻⣿⣿⣧⠀⠈⠉⠉⠩⠟⠻⠛⠛⣿⣿⠀⠀⢰⢿⢻⣿⣾⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⠀⣸⣿⣿⡟⠀⣿⣿⣿⣿⣿⣿⣿⣧⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣆⠢⠀⠀⠀⠀⢠⡆⠀⠙⣿⣧⠀⣼⢞⡜⣻⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⣰⣿⣿⡟⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣧⢳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠙⣿⣿⡄⠀⢀⡀⠀⡞⠀⠀⠀⠙⣿⣆⣯⠞⣽⣿⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⣿⣿⠏⠀⢠⣿⣿⠋⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣡⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀\\\",\\n            \\\"⡿⠃⠀⠀⣿⣿⠋⢰⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣶⣄⡀⠀\\\",\\n            \\\"⠀⠀⠀⣼⣿⠋⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠀⠀⢀⠀⠀⠈⢿⡇⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⡙⠿⣿⣷⣦\\\",\\n            \\\"⠀⠀⢰⣿⠏⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⣞⠉⠀⠀⠀⠈⢿⡄⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠙⠻\\\",\\n            \\\"⠀⠀⣾⡟⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⢀⣀⣀⣀⣀⣈⣁⠀⠀⠀⠀⠘⣇⠀⠀⢀⣴⣿⣿⣸⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣦⡀\\\",\\n            \\\"⠀⢰⡟⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣷⢿⣦⡀⠀⠀⠀⠁⠀⠀⠉⠉⠉⠉⠉⠉⠀⠀⢸⡄⣠⣿⣿⣿⠏⣿⣿⡙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠙⢿⣿⣿⣿⣿⣿\\\",\\n            \\\"⢀⡿⠁⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢠⣿⡀⢻⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣨⣿⣿⢿⣿⠏⠀⡿⣿⣧⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠈⠻⣿⣿⣿\\\",\\n            \\\"⣸⠃⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠋⢀⣿⡏⣇⠈⢻⣽⣧⡀⠀⠀⠀⠀⠀⠀⠀⣠⠔⣣⡾⣯⡼⠋⣾⠏⠀⢠⢇⣿⣿⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠈⠻⣿\\\",\\n            \\\"⠏⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⡟⠁⠀⣼⣿⠁⡏⠀⠘⣿⣿⠝⣦⡀⠀⠀⠀⠒⣋⣤⣿⣿⡿⠋⠀⢸⡏⠀⠀⡾⣼⣿⣿⡄⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀\\\",\\n            \\\"⢀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⡜⠁⠀⢀⣿⢿⡇⣷⠀⠀⠘⣾⢧⣼⣿⣿⡖⣾⣻⣽⣿⠿⠋⠀⢀⣤⡟⠀⠀⣼⣷⣿⣿⣿⡇⠀⠀⠈⢯⠙⢿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀\\\",\\n            \\\"⣾⣿⣿⣿⣿⠿⠟⠛⠋⠁⠀⠀⠀⡸⠃⠀⠀⣼⡟⢸⣇⢹⠀⠀⠀⠘⢯⣻⣿⣧⣿⠟⠋⠙⠉⠀⣀⡴⠋⡽⠁⠀⣰⣧⣿⣿⣿⣿⡇⠀⠀⠀⠘⡇⠀⠉⠙⠛⠿⣿⣿⣷⡀⠀⠀\\\",\\n            \\\"⠛⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠃⠀⠀⡇⣿⣆⠀⣿⠸⡄⠀⠀⠀⠀⠙⢾⠋⠀⠀⠀⢀⡤⠞⠋⠀⡸⠃⠀⣰⢇⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⢸⡄⠀⠀⠀⠀⢀⠼⠋⠓⠲⠤\\\",\\n            \\\"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡇⠀⠀⠀⣧⣿⣿⣿⣿⡄⣷⠀⠀⠀⠀⠀⠈⠳⣄⣤⠖⠋⠀⠀⠀⠈⠁⣸⣳⠟⣾⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠁⠀⠀⠀⣹⣿⣿⣿⣿⣧⢸⡄⠀⠀⠀⠀⠀⠀⠉⠀⠀⠀⠀⠀⠀⠀⢠⣿⠃⣸⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡇⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⡀⢻⢦⣄⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡿⠁⣸⣿⣿⣿⣿⣿⣿⣿⠀⠁⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠁⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣧⠸⡄⠈⠙⢿⡙⣆⠀⠀⠀⠀⣀⠴⠞⡟⠁⣰⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⡀⢱⡀⠀⠨⣻⣯⣄⠀⣠⠞⠁⢀⡜⠁⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣧⠈⢣⡀⠀⠀⠁⠺⠚⠁⠀⢀⡞⠁⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣇⡈⣧⣀⣀⣀⣀⠀⠀⣠⠞⢀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡗⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\\\",\\n            \\\"*/\\\",\\n            \\\"#include <bits/stdc++.h>\\\",\\n            \\\"\\\",\\n            \\\"#ifdef ONLINE_JUDGE\\\",\\n            \\\"#define debug(x)\\\",\\n            \\\"#else\\\",\\n            \\\"#include \\\\\\\"soham.h\\\\\\\"\\\",\\n            \\\"#endif\\\",\\n            \\\"\\\",\\n            \\\"using namespace std;\\\",\\n            \\\"\\\",\\n            \\\"typedef long long ll;\\\",\\n            \\\"typedef unsigned long long ull;\\\",\\n            \\\"typedef long double lld;\\\",\\n            \\\"\\\",\\n            \\\"#define INF 9e18\\\",\\n            \\\"#define MOD 1000000007\\\",\\n            \\\"#define nline \\\\\\\"\\\\\\\\n\\\\\\\"\\\",\\n            \\\"#define pb push_back\\\",\\n            \\\"#define ppb pop_back\\\",\\n            \\\"#define mp make_pair\\\",\\n            \\\"#define ff first\\\",\\n            \\\"#define ss second\\\",\\n            \\\"#define PI 3.141592653589793238462\\\",\\n            \\\"#define set_bits __builtin_popcountll\\\",\\n            \\\"#define sz(x) ((int)(x).size())\\\",\\n            \\\"#define all(x) (x).begin(), (x).end()\\\",\\n            \\\"#define fastio()                      \\\\\\\\\\\",\\n            \\\"    ios_base::sync_with_stdio(false); \\\\\\\\\\\",\\n            \\\"    cin.tie(NULL);                    \\\\\\\\\\\",\\n            \\\"    cout.tie(NULL)\\\",\\n            \\\"\\\",\\n            \\\"struct custom_hash\\\",\\n            \\\"{\\\",\\n            \\\"    static uint64_t splitmix64(uint64_t x)\\\",\\n            \\\"    {\\\",\\n            \\\"        x += 0x9e3779b97f4a7c15;\\\",\\n            \\\"        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\\\",\\n            \\\"        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\\\",\\n            \\\"        return x ^ (x >> 31);\\\",\\n            \\\"    }\\\",\\n            \\\"\\\",\\n            \\\"    size_t operator()(uint64_t x) const\\\",\\n            \\\"    {\\\",\\n            \\\"        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\\\",\\n            \\\"        return splitmix64(x + FIXED_RANDOM);\\\",\\n            \\\"    }\\\",\\n            \\\"};\\\",\\n            \\\"long long binpow(long long a, long long b) {\\\",\\n            \\\"    long long res = 1;\\\",\\n            \\\"    while (b > 0) {\\\",\\n            \\\"        if (b & 1)\\\",\\n            \\\"            res = res * a;\\\",\\n            \\\"        a = a * a;\\\",\\n            \\\"        b >>= 1;\\\",\\n            \\\"    }\\\",\\n            \\\"    return res;\\\",\\n            \\\"}\\\",\\n            \\\"\\\",\\n            \\\"void pain()\\\",\\n            \\\"{\\\",\\n            \\\"$0 \\\",\\n            \\\"}\\\",\\n            \\\"int main()\\\",\\n            \\\"{\\\",\\n            \\\"#ifndef ONLINE_JUDGE\\\",\\n            \\\"    freopen(\\\\\\\"input.txt\\\\\\\", \\\\\\\"r\\\\\\\", stdin);\\\",\\n            \\\"    freopen(\\\\\\\"output.txt\\\\\\\", \\\\\\\"w\\\\\\\", stdout);\\\",\\n            \\\"    freopen(\\\\\\\"error.txt\\\\\\\", \\\\\\\"w\\\\\\\", stderr);\\\",\\n            \\\"#endif\\\",\\n            \\\"    fastio();\\\",\\n            \\\"    ll test_case = 1;\\\",\\n            \\\"    cin >> test_case;\\\",\\n            \\\"    for (int t = 1; t <= test_case; t++)\\\",\\n            \\\"    {\\\",\\n            \\\"        // cout << \\\\\\\"Case #\\\\\\\" << t << \\\\\\\": \\\\\\\";\\\",\\n            \\\"        pain();\\\",\\n            \\\"    }\\\",\\n            \\\"    return 0;\\\",\\n            \\\"}\\\",\\n            \\\"\\\"\\n        ],\\n        \\\"description\\\": \\\"debug 2.0\\\"\\n    },\\n    \\\"disjoint set\\\": {\\n        \\\"prefix\\\": \\\"dsu\\\",\\n        \\\"body\\\": [\\n            \\\"class DSU\\\",\\n            \\\"{\\\",\\n            \\\"    int *parent;\\\",\\n            \\\"    int *rank;\\\",\\n            \\\"\\\",\\n            \\\"public:\\\",\\n            \\\"    DSU(int n)\\\",\\n            \\\"    {\\\",\\n            \\\"        parent = new int[n];\\\",\\n            \\\"        rank = new int[n];\\\",\\n            \\\"        for (int i = 0; i < n; i++)\\\",\\n            \\\"        {\\\",\\n            \\\"            parent[i] = i;\\\",\\n            \\\"            rank[i] = 1;\\\",\\n            \\\"        }\\\",\\n            \\\"    }\\\",\\n            \\\"    // Find function\\\",\\n            \\\"    int find(int i)\\\",\\n            \\\"    {\\\",\\n            \\\"        if (parent[i] == i)\\\",\\n            \\\"            return i;\\\",\\n            \\\"        return parent[i] = find(parent[i]);\\\",\\n            \\\"    }\\\",\\n            \\\"    // union function\\\",\\n            \\\"    void unite(int x, int y)\\\",\\n            \\\"    {\\\",\\n            \\\"        int s1 = find(x);\\\",\\n            \\\"        int s2 = find(y);\\\",\\n            \\\"\\\",\\n            \\\"        if (s1 != s2)\\\",\\n            \\\"        {\\\",\\n            \\\"            if (rank[s1] < rank[s2])\\\",\\n            \\\"            {\\\",\\n            \\\"                parent[s1] = s2;\\\",\\n            \\\"                rank[s2] += rank[s1];\\\",\\n            \\\"            }\\\",\\n            \\\"            else\\\",\\n            \\\"            {\\\",\\n            \\\"                parent[s2] = s1;\\\",\\n            \\\"                rank[s1] += rank[s2];\\\",\\n            \\\"            }\\\",\\n            \\\"        }\\\",\\n            \\\"    }\\\",\\n            \\\"};\\\"\\n        ],\\n        \\\"description\\\": \\\"disjoint set\\\"\\n    }\\n}\",\"typescriptreact.json\":\"{\\n    // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and \\n    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n    // same ids are connected.\\n    // Example:\\n    // \\\"Print to console\\\": {\\n    // \\t\\\"prefix\\\": \\\"log\\\",\\n    // \\t\\\"body\\\": [\\n    // \\t\\t\\\"console.log('$1');\\\",\\n    // \\t\\t\\\"$2\\\"\\n    // \\t],\\n    // \\t\\\"description\\\": \\\"Log output to console\\\"\\n    // }\\n    \\\"Typescript React Function Component with arrow syntax\\\": {\\n        \\\"prefix\\\": \\\"afc\\\",\\n        \\\"body\\\": [\\n            \\\"import { FC } from 'react'\\\",\\n            \\\"\\\",\\n            \\\"interface ${TM_FILENAME_BASE}Props {\\\",\\n            \\\"  $1\\\",\\n            \\\"}\\\",\\n            \\\"\\\",\\n            \\\"const $TM_FILENAME_BASE: FC<${TM_FILENAME_BASE}Props> = ({$2}) => {\\\",\\n            \\\"  return <div>$TM_FILENAME_BASE</div>\\\",\\n            \\\"}\\\",\\n            \\\"\\\",\\n            \\\"export default $TM_FILENAME_BASE\\\"\\n        ],\\n        \\\"description\\\": \\\"Typescript React Function Component\\\"\\n    },\\n    \\\"Typescript React Function Component with function syntax\\\": {\\n        \\\"prefix\\\": \\\"ffc\\\",\\n        \\\"body\\\": [\\n            \\\"\\\",\\n            \\\"interface ${TM_FILENAME_BASE}Props {\\\",\\n            \\\"  $1\\\",\\n            \\\"}\\\",\\n            \\\"\\\",\\n            \\\"export default function ${TM_FILENAME_BASE} ({$2}:${TM_FILENAME_BASE}Props){\\\",\\n            \\\"$3\\\",\\n            \\\"}\\\",\\n        ],\\n        \\\"description\\\": \\\"Typescript React Function Component\\\"\\n    },\\n}\"}"}}